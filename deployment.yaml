apiVersion: apps/v1
kind: Deployment
metadata:
  name: spring-rest-demo-deployment
  labels:
    app: spring-rest-demo
spec:
  replicas: 2 # Adjust as needed
  selector:
    matchLabels:
      app: spring-rest-demo
  template:
    metadata:
      labels:
        app: spring-rest-demo
    spec:
      containers:
        - name: spring-rest-demo-app
          image: gcr.io/$GOOGLE_CLOUD_PROJECT/spring-rest-demo
          ports:
            - containerPort: 8080 # Your application's port
          env:
            - name: SPRING_DATASOURCE_URL
              value: "jdbc:postgresql://localhost:5432/merchantmng" # This is for Cloud SQL Auth Proxy (localhost:5432)
            - name: SPRING_DATASOURCE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: cloudsql-db-credentials
                  key: username
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: cloudsql-db-credentials
                  key: password
            - name: SPRING_CLOUD_GCP_SQL_INSTANCE_CONNECTION_NAME
              value: "crypto-moon-450715-c2:asia-south1:cloud-postgres"  # Cloud SQL instance connection name
          # Add readiness and liveness probes as needed
          readinessProbe:
            httpGet:
              path: /actuator/health # Or your health check endpoint
              port: 8080
            initialDelaySeconds: 15
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /actuator/health # Or your health check endpoint
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
        # Add Cloud SQL Auth Proxy as a sidecar (if using)
        - name: cloudsql-proxy
          image: gcr.io/cloudsql-proxy/cloudsql-proxy:1.33.3 # Use the latest stable version
          command:
            - "/cloudsql/cloud_sql_proxy"
            - "--structured-logging"
            - "-instances=$CLOUD_SQL_INSTANCE_CONNECTION_NAME=tcp:5432"  # Use the env variable for instance connection name
            - "-credential-file=/secrets/cloudsql/cloudsql-credentials.json"  # Path to service account key
          securityContext:
            runAsUser: 2 # non-root user
          volumeMounts:
            - name: cloudsql-credentials
              mountPath: /secrets/cloudsql
            - name: cloudsql
              mountPath: /cloudsql
      # Define volumes for Cloud SQL Auth Proxy credentials
      volumes:
        - name: cloudsql-credentials
          secret:
            secretName: cloudsql-credentials  # Ensure the secret containing the service account key is created
        - name: cloudsql
          emptyDir: {}